{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCompileFn = getCompileFn;\nexports.getModernWebpackImporter = getModernWebpackImporter;\nexports.getSassImplementation = getSassImplementation;\nexports.getSassOptions = getSassOptions;\nexports.getWebpackImporter = getWebpackImporter;\nexports.getWebpackResolver = getWebpackResolver;\nexports.isSupportedFibers = isSupportedFibers;\nexports.normalizeSourceMap = normalizeSourceMap;\nvar _url = _interopRequireDefault(require(\"url\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _full = require(\"klona/full\");\nvar _neoAsync = _interopRequireDefault(require(\"neo-async\"));\nvar _SassWarning = _interopRequireDefault(require(\"./SassWarning\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getDefaultSassImplementation() {\n  let sassImplPkg = \"sass\";\n  try {\n    require.resolve(\"sass\");\n  } catch (ignoreError) {\n    try {\n      require.resolve(\"node-sass\");\n      sassImplPkg = \"node-sass\";\n    } catch (_ignoreError) {\n      try {\n        require.resolve(\"sass-embedded\");\n        sassImplPkg = \"sass-embedded\";\n      } catch (__ignoreError) {\n        sassImplPkg = \"sass\";\n      }\n    }\n  } // eslint-disable-next-line import/no-dynamic-require, global-require\n\n  return require(sassImplPkg);\n}\n/**\n * This function is not Webpack-specific and can be used by tools wishing to mimic `sass-loader`'s behaviour, so its signature should not be changed.\n */\n\nfunction getSassImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n  if (!resolvedImplementation) {\n    try {\n      resolvedImplementation = getDefaultSassImplementation();\n    } catch (error) {\n      loaderContext.emitError(error);\n      return;\n    }\n  }\n  if (typeof resolvedImplementation === \"string\") {\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(resolvedImplementation);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  }\n  const {\n    info\n  } = resolvedImplementation;\n  if (!info) {\n    loaderContext.emitError(new Error(\"Unknown Sass implementation.\"));\n    return;\n  }\n  const infoParts = info.split(\"\\t\");\n  if (infoParts.length < 2) {\n    loaderContext.emitError(new Error(`Unknown Sass implementation \"${info}\".`));\n    return;\n  }\n  const [implementationName] = infoParts;\n  if (implementationName === \"dart-sass\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  } else if (implementationName === \"node-sass\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  } else if (implementationName === \"sass-embedded\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  }\n  loaderContext.emitError(new Error(`Unknown Sass implementation \"${implementationName}\".`));\n}\n/**\n * @param {any} loaderContext\n * @returns {boolean}\n */\n\nfunction isProductionLikeMode(loaderContext) {\n  return loaderContext.mode === \"production\" || !loaderContext.mode;\n}\nfunction proxyCustomImporters(importers, loaderContext) {\n  return [].concat(importers).map(importer => function proxyImporter() {\n    const self = {\n      ...this,\n      webpackLoaderContext: loaderContext\n    };\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return importer.apply(self, args);\n  });\n}\nfunction isSupportedFibers() {\n  const [nodeVersion] = process.versions.node.split(\".\");\n  return Number(nodeVersion) < 16;\n}\n/**\n * Derives the sass options from the loader context and normalizes its values with sane defaults.\n *\n * @param {object} loaderContext\n * @param {object} loaderOptions\n * @param {string} content\n * @param {object} implementation\n * @param {boolean} useSourceMap\n * @returns {Object}\n */\n\nasync function getSassOptions(loaderContext, loaderOptions, content, implementation, useSourceMap) {\n  const options = (0, _full.klona)(loaderOptions.sassOptions ? typeof loaderOptions.sassOptions === \"function\" ? loaderOptions.sassOptions(loaderContext) || {} : loaderOptions.sassOptions : {});\n  const isDartSass = implementation.info.includes(\"dart-sass\");\n  const isModernAPI = loaderOptions.api === \"modern\";\n  options.data = loaderOptions.additionalData ? typeof loaderOptions.additionalData === \"function\" ? await loaderOptions.additionalData(content, loaderContext) : `${loaderOptions.additionalData}\\n${content}` : content;\n  if (!options.logger) {\n    // TODO set me to `true` by default in the next major release\n    const needEmitWarning = loaderOptions.warnRuleAsWarning === true;\n    const logger = loaderContext.getLogger(\"sass-loader\");\n    const formatSpan = span => `${span.url || \"-\"}:${span.start.line}:${span.start.column}: `;\n    options.logger = {\n      debug(message, loggerOptions) {\n        let builtMessage = \"\";\n        if (loggerOptions.span) {\n          builtMessage = formatSpan(loggerOptions.span);\n        }\n        builtMessage += message;\n        logger.debug(builtMessage);\n      },\n      warn(message, loggerOptions) {\n        let builtMessage = \"\";\n        if (loggerOptions.deprecation) {\n          builtMessage += \"Deprecation \";\n        }\n        if (loggerOptions.span && !loggerOptions.stack) {\n          builtMessage = formatSpan(loggerOptions.span);\n        }\n        builtMessage += message;\n        if (loggerOptions.stack) {\n          builtMessage += `\\n\\n${loggerOptions.stack}`;\n        }\n        if (needEmitWarning) {\n          loaderContext.emitWarning(new _SassWarning.default(builtMessage, loggerOptions));\n        } else {\n          logger.warn(builtMessage);\n        }\n      }\n    };\n  }\n  const {\n    resourcePath\n  } = loaderContext;\n  if (isModernAPI) {\n    options.url = _url.default.pathToFileURL(resourcePath); // opt.outputStyle\n\n    if (!options.style && isProductionLikeMode(loaderContext)) {\n      options.style = \"compressed\";\n    }\n    if (useSourceMap) {\n      options.sourceMap = true;\n    } // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n    if (typeof options.syntax === \"undefined\") {\n      const ext = _path.default.extname(resourcePath);\n      if (ext && ext.toLowerCase() === \".scss\") {\n        options.syntax = \"scss\";\n      } else if (ext && ext.toLowerCase() === \".sass\") {\n        options.syntax = \"indented\";\n      } else if (ext && ext.toLowerCase() === \".css\") {\n        options.syntax = \"css\";\n      }\n    }\n    options.importers = options.importers ? proxyCustomImporters(Array.isArray(options.importers) ? options.importers : [options.importers], loaderContext) : [];\n  } else {\n    options.file = resourcePath;\n    if (isDartSass && isSupportedFibers()) {\n      const shouldTryToResolveFibers = !options.fiber && options.fiber !== false;\n      if (shouldTryToResolveFibers) {\n        let fibers;\n        try {\n          fibers = require.resolve(\"fibers\");\n        } catch (_error) {// Nothing\n        }\n        if (fibers) {\n          // eslint-disable-next-line global-require, import/no-dynamic-require\n          options.fiber = require(fibers);\n        }\n      } else if (options.fiber === false) {\n        // Don't pass the `fiber` option for `sass` (`Dart Sass`)\n        delete options.fiber;\n      }\n    } else {\n      // Don't pass the `fiber` option for `node-sass`\n      delete options.fiber;\n    } // opt.outputStyle\n\n    if (!options.outputStyle && isProductionLikeMode(loaderContext)) {\n      options.outputStyle = \"compressed\";\n    }\n    if (useSourceMap) {\n      // Deliberately overriding the sourceMap option here.\n      // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\n      // In case it is a string, options.sourceMap should be a path where the source map is written.\n      // But since we're using the data option, the source map will not actually be written, but\n      // all paths in sourceMap.sources will be relative to that path.\n      // Pretty complicated... :(\n      options.sourceMap = true;\n      options.outFile = _path.default.join(loaderContext.rootContext, \"style.css.map\");\n      options.sourceMapContents = true;\n      options.omitSourceMapUrl = true;\n      options.sourceMapEmbed = false;\n    }\n    const ext = _path.default.extname(resourcePath); // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n    if (ext && ext.toLowerCase() === \".sass\" && typeof options.indentedSyntax === \"undefined\") {\n      options.indentedSyntax = true;\n    } else {\n      options.indentedSyntax = Boolean(options.indentedSyntax);\n    } // Allow passing custom importers to `sass`/`node-sass`. Accepts `Function` or an array of `Function`s.\n\n    options.importer = options.importer ? proxyCustomImporters(Array.isArray(options.importer) ? options.importer : [options.importer], loaderContext) : [];\n    options.includePaths = [].concat(process.cwd()).concat(\n    // We use `includePaths` in context for resolver, so it should be always absolute\n    (options.includePaths || []).map(includePath => _path.default.isAbsolute(includePath) ? includePath : _path.default.join(process.cwd(), includePath))).concat(process.env.SASS_PATH ? process.env.SASS_PATH.split(process.platform === \"win32\" ? \";\" : \":\") : []);\n    if (typeof options.charset === \"undefined\") {\n      options.charset = true;\n    }\n  }\n  return options;\n}\nconst MODULE_REQUEST_REGEX = /^[^?]*~/; // Examples:\n// - ~package\n// - ~package/\n// - ~@org\n// - ~@org/\n// - ~@org/package\n// - ~@org/package/\n\nconst IS_MODULE_IMPORT = /^~([^/]+|[^/]+\\/|@[^/]+[/][^/]+|@[^/]+\\/?|@[^/]+[/][^/]+\\/)$/;\n/**\n * When `sass`/`node-sass` tries to resolve an import, it uses a special algorithm.\n * Since the `sass-loader` uses webpack to resolve the modules, we need to simulate that algorithm.\n * This function returns an array of import paths to try.\n * The last entry in the array is always the original url to enable straight-forward webpack.config aliases.\n *\n * We don't need emulate `dart-sass` \"It's not clear which file to import.\" errors (when \"file.ext\" and \"_file.ext\" files are present simultaneously in the same directory).\n * This reduces performance and `dart-sass` always do it on own side.\n *\n * @param {string} url\n * @param {boolean} forWebpackResolver\n * @param {boolean} fromImport\n * @returns {Array<string>}\n */\n\nfunction getPossibleRequests(\n// eslint-disable-next-line no-shadow\nurl) {\n  let forWebpackResolver = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let fromImport = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let request = url; // In case there is module request, send this to webpack resolver\n\n  if (forWebpackResolver) {\n    if (MODULE_REQUEST_REGEX.test(url)) {\n      request = request.replace(MODULE_REQUEST_REGEX, \"\");\n    }\n    if (IS_MODULE_IMPORT.test(url)) {\n      request = request[request.length - 1] === \"/\" ? request : `${request}/`;\n      return [...new Set([request, url])];\n    }\n  } // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/167\n\n  const extension = _path.default.extname(request).toLowerCase(); // Because @import is also defined in CSS, Sass needs a way of compiling plain CSS @imports without trying to import the files at compile time.\n  // To accomplish this, and to ensure SCSS is as much of a superset of CSS as possible, Sass will compile any @imports with the following characteristics to plain CSS imports:\n  //  - imports where the URL ends with .css.\n  //  - imports where the URL begins http:// or https://.\n  //  - imports where the URL is written as a url().\n  //  - imports that have media queries.\n  //\n  // The `node-sass` package sends `@import` ending on `.css` to importer, it is bug, so we skip resolve\n\n  if (extension === \".css\") {\n    return [];\n  }\n  const dirname = _path.default.dirname(request);\n  const normalizedDirname = dirname === \".\" ? \"\" : `${dirname}/`;\n  const basename = _path.default.basename(request);\n  const basenameWithoutExtension = _path.default.basename(request, extension);\n  return [...new Set([].concat(fromImport ? [`${normalizedDirname}_${basenameWithoutExtension}.import${extension}`, `${normalizedDirname}${basenameWithoutExtension}.import${extension}`] : []).concat([`${normalizedDirname}_${basename}`, `${normalizedDirname}${basename}`]).concat(forWebpackResolver ? [url] : []))];\n}\nfunction promiseResolve(callbackResolve) {\n  return (context, request) => new Promise((resolve, reject) => {\n    callbackResolve(context, request, (error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\nasync function startResolving(resolutionMap) {\n  if (resolutionMap.length === 0) {\n    return Promise.reject();\n  }\n  const [{\n    possibleRequests\n  }] = resolutionMap;\n  if (possibleRequests.length === 0) {\n    return Promise.reject();\n  }\n  const [{\n    resolve,\n    context\n  }] = resolutionMap;\n  try {\n    return await resolve(context, possibleRequests[0]);\n  } catch (_ignoreError) {\n    const [, ...tailResult] = possibleRequests;\n    if (tailResult.length === 0) {\n      const [, ...tailResolutionMap] = resolutionMap;\n      return startResolving(tailResolutionMap);\n    } // eslint-disable-next-line no-param-reassign\n\n    resolutionMap[0].possibleRequests = tailResult;\n    return startResolving(resolutionMap);\n  }\n}\nconst IS_SPECIAL_MODULE_IMPORT = /^~[^/]+$/; // `[drive_letter]:\\` + `\\\\[server]\\[sharename]\\`\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\n/**\n * @public\n * Create the resolve function used in the custom Sass importer.\n *\n * Can be used by external tools to mimic how `sass-loader` works, for example\n * in a Jest transform. Such usages will want to wrap `resolve.create` from\n * [`enhanced-resolve`]{@link https://github.com/webpack/enhanced-resolve} to\n * pass as the `resolverFactory` argument.\n *\n * @param {Function} resolverFactory - A factory function for creating a Webpack\n *   resolver.\n * @param {Object} implementation - The imported Sass implementation, both\n *   `sass` (Dart Sass) and `node-sass` are supported.\n * @param {string[]} [includePaths] - The list of include paths passed to Sass.\n *\n * @throws If a compatible Sass implementation cannot be found.\n */\n\nfunction getWebpackResolver(resolverFactory, implementation) {\n  let includePaths = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  const isDartSass = implementation && implementation.info.includes(\"dart-sass\"); // We only have one difference with the built-in sass resolution logic and out resolution logic:\n  // First, we look at the files starting with `_`, then without `_` (i.e. `_name.sass`, `_name.scss`, `_name.css`, `name.sass`, `name.scss`, `name.css`),\n  // although `sass` look together by extensions (i.e. `_name.sass`/`name.sass`/`_name.scss`/`name.scss`/`_name.css`/`name.css`).\n  // It shouldn't be a problem because `sass` throw errors:\n  // - on having `_name.sass` and `name.sass` (extension can be `sass`, `scss` or `css`) in the same directory\n  // - on having `_name.sass` and `_name.scss` in the same directory\n  //\n  // Also `sass` prefer `sass`/`scss` over `css`.\n\n  const sassModuleResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: [\"_index\", \"index\"],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const sassImportResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: [\"_index.import\", \"_index\", \"index.import\", \"index\"],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const webpackModuleResolve = promiseResolve(resolverFactory({\n    dependencyType: \"sass\",\n    conditionNames: [\"sass\", \"style\"],\n    mainFields: [\"sass\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"_index\", \"index\", \"...\"],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const webpackImportResolve = promiseResolve(resolverFactory({\n    dependencyType: \"sass\",\n    conditionNames: [\"sass\", \"style\"],\n    mainFields: [\"sass\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"_index.import\", \"_index\", \"index.import\", \"index\", \"...\"],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  return (context, request, fromImport) => {\n    // See https://github.com/webpack/webpack/issues/12340\n    // Because `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`\n    // custom importer may not return `{ file: '/path/to/name.ext' }` and therefore our `context` will be relative\n    if (!isDartSass && !_path.default.isAbsolute(context)) {\n      return Promise.reject();\n    }\n    const originalRequest = request;\n    const isFileScheme = originalRequest.slice(0, 5).toLowerCase() === \"file:\";\n    if (isFileScheme) {\n      try {\n        // eslint-disable-next-line no-param-reassign\n        request = _url.default.fileURLToPath(originalRequest);\n      } catch (ignoreError) {\n        // eslint-disable-next-line no-param-reassign\n        request = request.slice(7);\n      }\n    }\n    let resolutionMap = [];\n    const needEmulateSassResolver =\n    // `sass` doesn't support module import\n    !IS_SPECIAL_MODULE_IMPORT.test(request) &&\n    // We need improve absolute paths handling.\n    // Absolute paths should be resolved:\n    // - Server-relative URLs - `<context>/path/to/file.ext` (where `<context>` is root context)\n    // - Absolute path - `/full/path/to/file.ext` or `C:\\\\full\\path\\to\\file.ext`\n    !isFileScheme && !originalRequest.startsWith(\"/\") && !IS_NATIVE_WIN32_PATH.test(originalRequest);\n    if (includePaths.length > 0 && needEmulateSassResolver) {\n      // The order of import precedence is as follows:\n      //\n      // 1. Filesystem imports relative to the base file.\n      // 2. Custom importer imports.\n      // 3. Filesystem imports relative to the working directory.\n      // 4. Filesystem imports relative to an `includePaths` path.\n      // 5. Filesystem imports relative to a `SASS_PATH` path.\n      //\n      // `sass` run custom importers before `3`, `4` and `5` points, we need to emulate this behavior to avoid wrong resolution.\n      const sassPossibleRequests = getPossibleRequests(request, false, fromImport); // `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`, so we need emulate this too\n\n      if (!isDartSass) {\n        resolutionMap = resolutionMap.concat({\n          resolve: fromImport ? sassImportResolve : sassModuleResolve,\n          context: _path.default.dirname(context),\n          possibleRequests: sassPossibleRequests\n        });\n      }\n      resolutionMap = resolutionMap.concat(\n      // eslint-disable-next-line no-shadow\n      includePaths.map(context => {\n        return {\n          resolve: fromImport ? sassImportResolve : sassModuleResolve,\n          context,\n          possibleRequests: sassPossibleRequests\n        };\n      }));\n    }\n    const webpackPossibleRequests = getPossibleRequests(request, true, fromImport);\n    resolutionMap = resolutionMap.concat({\n      resolve: fromImport ? webpackImportResolve : webpackModuleResolve,\n      context: _path.default.dirname(context),\n      possibleRequests: webpackPossibleRequests\n    });\n    return startResolving(resolutionMap);\n  };\n}\nconst MATCH_CSS = /\\.css$/i;\nfunction getModernWebpackImporter() {\n  return {\n    async canonicalize() {\n      return null;\n    },\n    load() {// TODO implement\n    }\n  };\n}\nfunction getWebpackImporter(loaderContext, implementation, includePaths) {\n  const resolve = getWebpackResolver(loaderContext.getResolve, implementation, includePaths);\n  return function importer(originalUrl, prev, done) {\n    const {\n      fromImport\n    } = this;\n    resolve(prev, originalUrl, fromImport).then(result => {\n      // Add the result as dependency.\n      // Although we're also using stats.includedFiles, this might come in handy when an error occurs.\n      // In this case, we don't get stats.includedFiles from node-sass/sass.\n      loaderContext.addDependency(_path.default.normalize(result)); // By removing the CSS file extension, we trigger node-sass to include the CSS file instead of just linking it.\n\n      done({\n        file: result.replace(MATCH_CSS, \"\")\n      });\n    }) // Catch all resolving errors, return the original file and pass responsibility back to other custom importers\n    .catch(() => {\n      done({\n        file: originalUrl\n      });\n    });\n  };\n}\nlet nodeSassJobQueue = null;\n/**\n * Verifies that the implementation and version of Sass is supported by this loader.\n *\n * @param {Object} implementation\n * @param {Object} options\n * @returns {Function}\n */\n\nfunction getCompileFn(implementation, options) {\n  const isNewSass = implementation.info.includes(\"dart-sass\") || implementation.info.includes(\"sass-embedded\");\n  if (isNewSass) {\n    if (options.api === \"modern\") {\n      return sassOptions => {\n        const {\n          data,\n          ...rest\n        } = sassOptions;\n        return implementation.compileStringAsync(data, rest);\n      };\n    }\n    return sassOptions => new Promise((resolve, reject) => {\n      implementation.render(sassOptions, (error, result) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  }\n  if (options.api === \"modern\") {\n    throw new Error(\"Modern API is not supported for 'node-sass'\");\n  } // There is an issue with node-sass when async custom importers are used\n  // See https://github.com/sass/node-sass/issues/857#issuecomment-93594360\n  // We need to use a job queue to make sure that one thread is always available to the UV lib\n\n  if (nodeSassJobQueue === null) {\n    const threadPoolSize = Number(process.env.UV_THREADPOOL_SIZE || 4);\n    nodeSassJobQueue = _neoAsync.default.queue(implementation.render.bind(implementation), threadPoolSize - 1);\n  }\n  return sassOptions => new Promise((resolve, reject) => {\n    nodeSassJobQueue.push.bind(nodeSassJobQueue)(sassOptions, (error, result) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n      resolve(result);\n    });\n  });\n}\nconst ABSOLUTE_SCHEME = /^[A-Za-z0-9+\\-.]+:/;\n/**\n * @param {string} source\n * @returns {\"absolute\" | \"scheme-relative\" | \"path-absolute\" | \"path-absolute\"}\n */\n\nfunction getURLType(source) {\n  if (source[0] === \"/\") {\n    if (source[1] === \"/\") {\n      return \"scheme-relative\";\n    }\n    return \"path-absolute\";\n  }\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return \"path-absolute\";\n  }\n  return ABSOLUTE_SCHEME.test(source) ? \"absolute\" : \"path-relative\";\n}\nfunction normalizeSourceMap(map, rootContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  if (typeof newMap.file !== \"undefined\") {\n    delete newMap.file;\n  } // eslint-disable-next-line no-param-reassign\n\n  newMap.sourceRoot = \"\"; // node-sass returns POSIX paths, that's why we need to transform them back to native paths.\n  // This fixes an error on windows where the source-map module cannot resolve the source maps.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-279460722\n  // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types (except `file:`)\n\n    if (sourceType === \"absolute\" && /^file:/i.test(source)) {\n      return _url.default.fileURLToPath(source);\n    } else if (sourceType === \"path-relative\") {\n      return _path.default.resolve(rootContext, _path.default.normalize(source));\n    }\n    return source;\n  });\n  return newMap;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getCompileFn","getModernWebpackImporter","getSassImplementation","getSassOptions","getWebpackImporter","getWebpackResolver","isSupportedFibers","normalizeSourceMap","_url","_interopRequireDefault","require","_path","_full","_neoAsync","_SassWarning","obj","__esModule","default","getDefaultSassImplementation","sassImplPkg","resolve","ignoreError","_ignoreError","__ignoreError","loaderContext","implementation","resolvedImplementation","error","emitError","info","Error","infoParts","split","length","implementationName","isProductionLikeMode","mode","proxyCustomImporters","importers","concat","map","importer","proxyImporter","self","webpackLoaderContext","args","apply","nodeVersion","process","versions","node","Number","loaderOptions","content","useSourceMap","options","klona","sassOptions","isDartSass","includes","isModernAPI","api","data","additionalData","logger","needEmitWarning","warnRuleAsWarning","getLogger","formatSpan","span","url","start","line","column","debug","message","loggerOptions","builtMessage","warn","deprecation","stack","emitWarning","resourcePath","pathToFileURL","style","sourceMap","syntax","ext","extname","toLowerCase","Array","isArray","file","shouldTryToResolveFibers","fiber","fibers","_error","outputStyle","outFile","join","rootContext","sourceMapContents","omitSourceMapUrl","sourceMapEmbed","indentedSyntax","Boolean","includePaths","cwd","includePath","isAbsolute","env","SASS_PATH","platform","charset","MODULE_REQUEST_REGEX","IS_MODULE_IMPORT","getPossibleRequests","forWebpackResolver","fromImport","request","test","replace","Set","extension","dirname","normalizedDirname","basename","basenameWithoutExtension","promiseResolve","callbackResolve","context","Promise","reject","result","startResolving","resolutionMap","possibleRequests","tailResult","tailResolutionMap","IS_SPECIAL_MODULE_IMPORT","IS_NATIVE_WIN32_PATH","resolverFactory","sassModuleResolve","alias","aliasFields","conditionNames","descriptionFiles","extensions","exportsFields","mainFields","mainFiles","modules","restrictions","preferRelative","sassImportResolve","webpackModuleResolve","dependencyType","webpackImportResolve","originalRequest","isFileScheme","slice","fileURLToPath","needEmulateSassResolver","startsWith","sassPossibleRequests","webpackPossibleRequests","MATCH_CSS","canonicalize","load","getResolve","originalUrl","prev","done","then","addDependency","normalize","catch","nodeSassJobQueue","isNewSass","rest","compileStringAsync","render","threadPoolSize","UV_THREADPOOL_SIZE","queue","bind","push","ABSOLUTE_SCHEME","getURLType","source","newMap","sourceRoot","sources","sourceType"],"sources":["/Users/ruchikaashokbharati/Documents/Contacts_Web_App/frontend/node_modules/sass-loader/dist/utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCompileFn = getCompileFn;\nexports.getModernWebpackImporter = getModernWebpackImporter;\nexports.getSassImplementation = getSassImplementation;\nexports.getSassOptions = getSassOptions;\nexports.getWebpackImporter = getWebpackImporter;\nexports.getWebpackResolver = getWebpackResolver;\nexports.isSupportedFibers = isSupportedFibers;\nexports.normalizeSourceMap = normalizeSourceMap;\n\nvar _url = _interopRequireDefault(require(\"url\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _full = require(\"klona/full\");\n\nvar _neoAsync = _interopRequireDefault(require(\"neo-async\"));\n\nvar _SassWarning = _interopRequireDefault(require(\"./SassWarning\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getDefaultSassImplementation() {\n  let sassImplPkg = \"sass\";\n\n  try {\n    require.resolve(\"sass\");\n  } catch (ignoreError) {\n    try {\n      require.resolve(\"node-sass\");\n\n      sassImplPkg = \"node-sass\";\n    } catch (_ignoreError) {\n      try {\n        require.resolve(\"sass-embedded\");\n\n        sassImplPkg = \"sass-embedded\";\n      } catch (__ignoreError) {\n        sassImplPkg = \"sass\";\n      }\n    }\n  } // eslint-disable-next-line import/no-dynamic-require, global-require\n\n\n  return require(sassImplPkg);\n}\n/**\n * This function is not Webpack-specific and can be used by tools wishing to mimic `sass-loader`'s behaviour, so its signature should not be changed.\n */\n\n\nfunction getSassImplementation(loaderContext, implementation) {\n  let resolvedImplementation = implementation;\n\n  if (!resolvedImplementation) {\n    try {\n      resolvedImplementation = getDefaultSassImplementation();\n    } catch (error) {\n      loaderContext.emitError(error);\n      return;\n    }\n  }\n\n  if (typeof resolvedImplementation === \"string\") {\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      resolvedImplementation = require(resolvedImplementation);\n    } catch (error) {\n      loaderContext.emitError(error); // eslint-disable-next-line consistent-return\n\n      return;\n    }\n  }\n\n  const {\n    info\n  } = resolvedImplementation;\n\n  if (!info) {\n    loaderContext.emitError(new Error(\"Unknown Sass implementation.\"));\n    return;\n  }\n\n  const infoParts = info.split(\"\\t\");\n\n  if (infoParts.length < 2) {\n    loaderContext.emitError(new Error(`Unknown Sass implementation \"${info}\".`));\n    return;\n  }\n\n  const [implementationName] = infoParts;\n\n  if (implementationName === \"dart-sass\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  } else if (implementationName === \"node-sass\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  } else if (implementationName === \"sass-embedded\") {\n    // eslint-disable-next-line consistent-return\n    return resolvedImplementation;\n  }\n\n  loaderContext.emitError(new Error(`Unknown Sass implementation \"${implementationName}\".`));\n}\n/**\n * @param {any} loaderContext\n * @returns {boolean}\n */\n\n\nfunction isProductionLikeMode(loaderContext) {\n  return loaderContext.mode === \"production\" || !loaderContext.mode;\n}\n\nfunction proxyCustomImporters(importers, loaderContext) {\n  return [].concat(importers).map(importer => function proxyImporter(...args) {\n    const self = { ...this,\n      webpackLoaderContext: loaderContext\n    };\n    return importer.apply(self, args);\n  });\n}\n\nfunction isSupportedFibers() {\n  const [nodeVersion] = process.versions.node.split(\".\");\n  return Number(nodeVersion) < 16;\n}\n/**\n * Derives the sass options from the loader context and normalizes its values with sane defaults.\n *\n * @param {object} loaderContext\n * @param {object} loaderOptions\n * @param {string} content\n * @param {object} implementation\n * @param {boolean} useSourceMap\n * @returns {Object}\n */\n\n\nasync function getSassOptions(loaderContext, loaderOptions, content, implementation, useSourceMap) {\n  const options = (0, _full.klona)(loaderOptions.sassOptions ? typeof loaderOptions.sassOptions === \"function\" ? loaderOptions.sassOptions(loaderContext) || {} : loaderOptions.sassOptions : {});\n  const isDartSass = implementation.info.includes(\"dart-sass\");\n  const isModernAPI = loaderOptions.api === \"modern\";\n  options.data = loaderOptions.additionalData ? typeof loaderOptions.additionalData === \"function\" ? await loaderOptions.additionalData(content, loaderContext) : `${loaderOptions.additionalData}\\n${content}` : content;\n\n  if (!options.logger) {\n    // TODO set me to `true` by default in the next major release\n    const needEmitWarning = loaderOptions.warnRuleAsWarning === true;\n    const logger = loaderContext.getLogger(\"sass-loader\");\n\n    const formatSpan = span => `${span.url || \"-\"}:${span.start.line}:${span.start.column}: `;\n\n    options.logger = {\n      debug(message, loggerOptions) {\n        let builtMessage = \"\";\n\n        if (loggerOptions.span) {\n          builtMessage = formatSpan(loggerOptions.span);\n        }\n\n        builtMessage += message;\n        logger.debug(builtMessage);\n      },\n\n      warn(message, loggerOptions) {\n        let builtMessage = \"\";\n\n        if (loggerOptions.deprecation) {\n          builtMessage += \"Deprecation \";\n        }\n\n        if (loggerOptions.span && !loggerOptions.stack) {\n          builtMessage = formatSpan(loggerOptions.span);\n        }\n\n        builtMessage += message;\n\n        if (loggerOptions.stack) {\n          builtMessage += `\\n\\n${loggerOptions.stack}`;\n        }\n\n        if (needEmitWarning) {\n          loaderContext.emitWarning(new _SassWarning.default(builtMessage, loggerOptions));\n        } else {\n          logger.warn(builtMessage);\n        }\n      }\n\n    };\n  }\n\n  const {\n    resourcePath\n  } = loaderContext;\n\n  if (isModernAPI) {\n    options.url = _url.default.pathToFileURL(resourcePath); // opt.outputStyle\n\n    if (!options.style && isProductionLikeMode(loaderContext)) {\n      options.style = \"compressed\";\n    }\n\n    if (useSourceMap) {\n      options.sourceMap = true;\n    } // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n\n    if (typeof options.syntax === \"undefined\") {\n      const ext = _path.default.extname(resourcePath);\n\n      if (ext && ext.toLowerCase() === \".scss\") {\n        options.syntax = \"scss\";\n      } else if (ext && ext.toLowerCase() === \".sass\") {\n        options.syntax = \"indented\";\n      } else if (ext && ext.toLowerCase() === \".css\") {\n        options.syntax = \"css\";\n      }\n    }\n\n    options.importers = options.importers ? proxyCustomImporters(Array.isArray(options.importers) ? options.importers : [options.importers], loaderContext) : [];\n  } else {\n    options.file = resourcePath;\n\n    if (isDartSass && isSupportedFibers()) {\n      const shouldTryToResolveFibers = !options.fiber && options.fiber !== false;\n\n      if (shouldTryToResolveFibers) {\n        let fibers;\n\n        try {\n          fibers = require.resolve(\"fibers\");\n        } catch (_error) {// Nothing\n        }\n\n        if (fibers) {\n          // eslint-disable-next-line global-require, import/no-dynamic-require\n          options.fiber = require(fibers);\n        }\n      } else if (options.fiber === false) {\n        // Don't pass the `fiber` option for `sass` (`Dart Sass`)\n        delete options.fiber;\n      }\n    } else {\n      // Don't pass the `fiber` option for `node-sass`\n      delete options.fiber;\n    } // opt.outputStyle\n\n\n    if (!options.outputStyle && isProductionLikeMode(loaderContext)) {\n      options.outputStyle = \"compressed\";\n    }\n\n    if (useSourceMap) {\n      // Deliberately overriding the sourceMap option here.\n      // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\n      // In case it is a string, options.sourceMap should be a path where the source map is written.\n      // But since we're using the data option, the source map will not actually be written, but\n      // all paths in sourceMap.sources will be relative to that path.\n      // Pretty complicated... :(\n      options.sourceMap = true;\n      options.outFile = _path.default.join(loaderContext.rootContext, \"style.css.map\");\n      options.sourceMapContents = true;\n      options.omitSourceMapUrl = true;\n      options.sourceMapEmbed = false;\n    }\n\n    const ext = _path.default.extname(resourcePath); // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n\n\n    if (ext && ext.toLowerCase() === \".sass\" && typeof options.indentedSyntax === \"undefined\") {\n      options.indentedSyntax = true;\n    } else {\n      options.indentedSyntax = Boolean(options.indentedSyntax);\n    } // Allow passing custom importers to `sass`/`node-sass`. Accepts `Function` or an array of `Function`s.\n\n\n    options.importer = options.importer ? proxyCustomImporters(Array.isArray(options.importer) ? options.importer : [options.importer], loaderContext) : [];\n    options.includePaths = [].concat(process.cwd()).concat( // We use `includePaths` in context for resolver, so it should be always absolute\n    (options.includePaths || []).map(includePath => _path.default.isAbsolute(includePath) ? includePath : _path.default.join(process.cwd(), includePath))).concat(process.env.SASS_PATH ? process.env.SASS_PATH.split(process.platform === \"win32\" ? \";\" : \":\") : []);\n\n    if (typeof options.charset === \"undefined\") {\n      options.charset = true;\n    }\n  }\n\n  return options;\n}\n\nconst MODULE_REQUEST_REGEX = /^[^?]*~/; // Examples:\n// - ~package\n// - ~package/\n// - ~@org\n// - ~@org/\n// - ~@org/package\n// - ~@org/package/\n\nconst IS_MODULE_IMPORT = /^~([^/]+|[^/]+\\/|@[^/]+[/][^/]+|@[^/]+\\/?|@[^/]+[/][^/]+\\/)$/;\n/**\n * When `sass`/`node-sass` tries to resolve an import, it uses a special algorithm.\n * Since the `sass-loader` uses webpack to resolve the modules, we need to simulate that algorithm.\n * This function returns an array of import paths to try.\n * The last entry in the array is always the original url to enable straight-forward webpack.config aliases.\n *\n * We don't need emulate `dart-sass` \"It's not clear which file to import.\" errors (when \"file.ext\" and \"_file.ext\" files are present simultaneously in the same directory).\n * This reduces performance and `dart-sass` always do it on own side.\n *\n * @param {string} url\n * @param {boolean} forWebpackResolver\n * @param {boolean} fromImport\n * @returns {Array<string>}\n */\n\nfunction getPossibleRequests( // eslint-disable-next-line no-shadow\nurl, forWebpackResolver = false, fromImport = false) {\n  let request = url; // In case there is module request, send this to webpack resolver\n\n  if (forWebpackResolver) {\n    if (MODULE_REQUEST_REGEX.test(url)) {\n      request = request.replace(MODULE_REQUEST_REGEX, \"\");\n    }\n\n    if (IS_MODULE_IMPORT.test(url)) {\n      request = request[request.length - 1] === \"/\" ? request : `${request}/`;\n      return [...new Set([request, url])];\n    }\n  } // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/167\n\n\n  const extension = _path.default.extname(request).toLowerCase(); // Because @import is also defined in CSS, Sass needs a way of compiling plain CSS @imports without trying to import the files at compile time.\n  // To accomplish this, and to ensure SCSS is as much of a superset of CSS as possible, Sass will compile any @imports with the following characteristics to plain CSS imports:\n  //  - imports where the URL ends with .css.\n  //  - imports where the URL begins http:// or https://.\n  //  - imports where the URL is written as a url().\n  //  - imports that have media queries.\n  //\n  // The `node-sass` package sends `@import` ending on `.css` to importer, it is bug, so we skip resolve\n\n\n  if (extension === \".css\") {\n    return [];\n  }\n\n  const dirname = _path.default.dirname(request);\n\n  const normalizedDirname = dirname === \".\" ? \"\" : `${dirname}/`;\n\n  const basename = _path.default.basename(request);\n\n  const basenameWithoutExtension = _path.default.basename(request, extension);\n\n  return [...new Set([].concat(fromImport ? [`${normalizedDirname}_${basenameWithoutExtension}.import${extension}`, `${normalizedDirname}${basenameWithoutExtension}.import${extension}`] : []).concat([`${normalizedDirname}_${basename}`, `${normalizedDirname}${basename}`]).concat(forWebpackResolver ? [url] : []))];\n}\n\nfunction promiseResolve(callbackResolve) {\n  return (context, request) => new Promise((resolve, reject) => {\n    callbackResolve(context, request, (error, result) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\nasync function startResolving(resolutionMap) {\n  if (resolutionMap.length === 0) {\n    return Promise.reject();\n  }\n\n  const [{\n    possibleRequests\n  }] = resolutionMap;\n\n  if (possibleRequests.length === 0) {\n    return Promise.reject();\n  }\n\n  const [{\n    resolve,\n    context\n  }] = resolutionMap;\n\n  try {\n    return await resolve(context, possibleRequests[0]);\n  } catch (_ignoreError) {\n    const [, ...tailResult] = possibleRequests;\n\n    if (tailResult.length === 0) {\n      const [, ...tailResolutionMap] = resolutionMap;\n      return startResolving(tailResolutionMap);\n    } // eslint-disable-next-line no-param-reassign\n\n\n    resolutionMap[0].possibleRequests = tailResult;\n    return startResolving(resolutionMap);\n  }\n}\n\nconst IS_SPECIAL_MODULE_IMPORT = /^~[^/]+$/; // `[drive_letter]:\\` + `\\\\[server]\\[sharename]\\`\n\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\n/**\n * @public\n * Create the resolve function used in the custom Sass importer.\n *\n * Can be used by external tools to mimic how `sass-loader` works, for example\n * in a Jest transform. Such usages will want to wrap `resolve.create` from\n * [`enhanced-resolve`]{@link https://github.com/webpack/enhanced-resolve} to\n * pass as the `resolverFactory` argument.\n *\n * @param {Function} resolverFactory - A factory function for creating a Webpack\n *   resolver.\n * @param {Object} implementation - The imported Sass implementation, both\n *   `sass` (Dart Sass) and `node-sass` are supported.\n * @param {string[]} [includePaths] - The list of include paths passed to Sass.\n *\n * @throws If a compatible Sass implementation cannot be found.\n */\n\nfunction getWebpackResolver(resolverFactory, implementation, includePaths = []) {\n  const isDartSass = implementation && implementation.info.includes(\"dart-sass\"); // We only have one difference with the built-in sass resolution logic and out resolution logic:\n  // First, we look at the files starting with `_`, then without `_` (i.e. `_name.sass`, `_name.scss`, `_name.css`, `name.sass`, `name.scss`, `name.css`),\n  // although `sass` look together by extensions (i.e. `_name.sass`/`name.sass`/`_name.scss`/`name.scss`/`_name.css`/`name.css`).\n  // It shouldn't be a problem because `sass` throw errors:\n  // - on having `_name.sass` and `name.sass` (extension can be `sass`, `scss` or `css`) in the same directory\n  // - on having `_name.sass` and `_name.scss` in the same directory\n  //\n  // Also `sass` prefer `sass`/`scss` over `css`.\n\n  const sassModuleResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: [\"_index\", \"index\"],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const sassImportResolve = promiseResolve(resolverFactory({\n    alias: [],\n    aliasFields: [],\n    conditionNames: [],\n    descriptionFiles: [],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    exportsFields: [],\n    mainFields: [],\n    mainFiles: [\"_index.import\", \"_index\", \"index.import\", \"index\"],\n    modules: [],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const webpackModuleResolve = promiseResolve(resolverFactory({\n    dependencyType: \"sass\",\n    conditionNames: [\"sass\", \"style\"],\n    mainFields: [\"sass\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"_index\", \"index\", \"...\"],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  const webpackImportResolve = promiseResolve(resolverFactory({\n    dependencyType: \"sass\",\n    conditionNames: [\"sass\", \"style\"],\n    mainFields: [\"sass\", \"style\", \"main\", \"...\"],\n    mainFiles: [\"_index.import\", \"_index\", \"index.import\", \"index\", \"...\"],\n    extensions: [\".sass\", \".scss\", \".css\"],\n    restrictions: [/\\.((sa|sc|c)ss)$/i],\n    preferRelative: true\n  }));\n  return (context, request, fromImport) => {\n    // See https://github.com/webpack/webpack/issues/12340\n    // Because `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`\n    // custom importer may not return `{ file: '/path/to/name.ext' }` and therefore our `context` will be relative\n    if (!isDartSass && !_path.default.isAbsolute(context)) {\n      return Promise.reject();\n    }\n\n    const originalRequest = request;\n    const isFileScheme = originalRequest.slice(0, 5).toLowerCase() === \"file:\";\n\n    if (isFileScheme) {\n      try {\n        // eslint-disable-next-line no-param-reassign\n        request = _url.default.fileURLToPath(originalRequest);\n      } catch (ignoreError) {\n        // eslint-disable-next-line no-param-reassign\n        request = request.slice(7);\n      }\n    }\n\n    let resolutionMap = [];\n    const needEmulateSassResolver = // `sass` doesn't support module import\n    !IS_SPECIAL_MODULE_IMPORT.test(request) && // We need improve absolute paths handling.\n    // Absolute paths should be resolved:\n    // - Server-relative URLs - `<context>/path/to/file.ext` (where `<context>` is root context)\n    // - Absolute path - `/full/path/to/file.ext` or `C:\\\\full\\path\\to\\file.ext`\n    !isFileScheme && !originalRequest.startsWith(\"/\") && !IS_NATIVE_WIN32_PATH.test(originalRequest);\n\n    if (includePaths.length > 0 && needEmulateSassResolver) {\n      // The order of import precedence is as follows:\n      //\n      // 1. Filesystem imports relative to the base file.\n      // 2. Custom importer imports.\n      // 3. Filesystem imports relative to the working directory.\n      // 4. Filesystem imports relative to an `includePaths` path.\n      // 5. Filesystem imports relative to a `SASS_PATH` path.\n      //\n      // `sass` run custom importers before `3`, `4` and `5` points, we need to emulate this behavior to avoid wrong resolution.\n      const sassPossibleRequests = getPossibleRequests(request, false, fromImport); // `node-sass` calls our importer before `1. Filesystem imports relative to the base file.`, so we need emulate this too\n\n      if (!isDartSass) {\n        resolutionMap = resolutionMap.concat({\n          resolve: fromImport ? sassImportResolve : sassModuleResolve,\n          context: _path.default.dirname(context),\n          possibleRequests: sassPossibleRequests\n        });\n      }\n\n      resolutionMap = resolutionMap.concat( // eslint-disable-next-line no-shadow\n      includePaths.map(context => {\n        return {\n          resolve: fromImport ? sassImportResolve : sassModuleResolve,\n          context,\n          possibleRequests: sassPossibleRequests\n        };\n      }));\n    }\n\n    const webpackPossibleRequests = getPossibleRequests(request, true, fromImport);\n    resolutionMap = resolutionMap.concat({\n      resolve: fromImport ? webpackImportResolve : webpackModuleResolve,\n      context: _path.default.dirname(context),\n      possibleRequests: webpackPossibleRequests\n    });\n    return startResolving(resolutionMap);\n  };\n}\n\nconst MATCH_CSS = /\\.css$/i;\n\nfunction getModernWebpackImporter() {\n  return {\n    async canonicalize() {\n      return null;\n    },\n\n    load() {// TODO implement\n    }\n\n  };\n}\n\nfunction getWebpackImporter(loaderContext, implementation, includePaths) {\n  const resolve = getWebpackResolver(loaderContext.getResolve, implementation, includePaths);\n  return function importer(originalUrl, prev, done) {\n    const {\n      fromImport\n    } = this;\n    resolve(prev, originalUrl, fromImport).then(result => {\n      // Add the result as dependency.\n      // Although we're also using stats.includedFiles, this might come in handy when an error occurs.\n      // In this case, we don't get stats.includedFiles from node-sass/sass.\n      loaderContext.addDependency(_path.default.normalize(result)); // By removing the CSS file extension, we trigger node-sass to include the CSS file instead of just linking it.\n\n      done({\n        file: result.replace(MATCH_CSS, \"\")\n      });\n    }) // Catch all resolving errors, return the original file and pass responsibility back to other custom importers\n    .catch(() => {\n      done({\n        file: originalUrl\n      });\n    });\n  };\n}\n\nlet nodeSassJobQueue = null;\n/**\n * Verifies that the implementation and version of Sass is supported by this loader.\n *\n * @param {Object} implementation\n * @param {Object} options\n * @returns {Function}\n */\n\nfunction getCompileFn(implementation, options) {\n  const isNewSass = implementation.info.includes(\"dart-sass\") || implementation.info.includes(\"sass-embedded\");\n\n  if (isNewSass) {\n    if (options.api === \"modern\") {\n      return sassOptions => {\n        const {\n          data,\n          ...rest\n        } = sassOptions;\n        return implementation.compileStringAsync(data, rest);\n      };\n    }\n\n    return sassOptions => new Promise((resolve, reject) => {\n      implementation.render(sassOptions, (error, result) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(result);\n      });\n    });\n  }\n\n  if (options.api === \"modern\") {\n    throw new Error(\"Modern API is not supported for 'node-sass'\");\n  } // There is an issue with node-sass when async custom importers are used\n  // See https://github.com/sass/node-sass/issues/857#issuecomment-93594360\n  // We need to use a job queue to make sure that one thread is always available to the UV lib\n\n\n  if (nodeSassJobQueue === null) {\n    const threadPoolSize = Number(process.env.UV_THREADPOOL_SIZE || 4);\n    nodeSassJobQueue = _neoAsync.default.queue(implementation.render.bind(implementation), threadPoolSize - 1);\n  }\n\n  return sassOptions => new Promise((resolve, reject) => {\n    nodeSassJobQueue.push.bind(nodeSassJobQueue)(sassOptions, (error, result) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      resolve(result);\n    });\n  });\n}\n\nconst ABSOLUTE_SCHEME = /^[A-Za-z0-9+\\-.]+:/;\n/**\n * @param {string} source\n * @returns {\"absolute\" | \"scheme-relative\" | \"path-absolute\" | \"path-absolute\"}\n */\n\nfunction getURLType(source) {\n  if (source[0] === \"/\") {\n    if (source[1] === \"/\") {\n      return \"scheme-relative\";\n    }\n\n    return \"path-absolute\";\n  }\n\n  if (IS_NATIVE_WIN32_PATH.test(source)) {\n    return \"path-absolute\";\n  }\n\n  return ABSOLUTE_SCHEME.test(source) ? \"absolute\" : \"path-relative\";\n}\n\nfunction normalizeSourceMap(map, rootContext) {\n  const newMap = map; // result.map.file is an optional property that provides the output filename.\n  // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n  // eslint-disable-next-line no-param-reassign\n\n  if (typeof newMap.file !== \"undefined\") {\n    delete newMap.file;\n  } // eslint-disable-next-line no-param-reassign\n\n\n  newMap.sourceRoot = \"\"; // node-sass returns POSIX paths, that's why we need to transform them back to native paths.\n  // This fixes an error on windows where the source-map module cannot resolve the source maps.\n  // @see https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-279460722\n  // eslint-disable-next-line no-param-reassign\n\n  newMap.sources = newMap.sources.map(source => {\n    const sourceType = getURLType(source); // Do no touch `scheme-relative`, `path-absolute` and `absolute` types (except `file:`)\n\n    if (sourceType === \"absolute\" && /^file:/i.test(source)) {\n      return _url.default.fileURLToPath(source);\n    } else if (sourceType === \"path-relative\") {\n      return _path.default.resolve(rootContext, _path.default.normalize(source));\n    }\n\n    return source;\n  });\n  return newMap;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}